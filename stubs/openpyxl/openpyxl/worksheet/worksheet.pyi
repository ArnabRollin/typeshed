from collections.abc import Generator
from openpyxl.workbook.workbook import Workbook
from openpyxl.worksheet.cell_range import CellRange
from openpyxl.worksheet.pagebreak import PageBreak
from openpyxl.worksheet.table import Table, TableList
from openpyxl.worksheet.views import SheetView
from openpyxl.cell.cell import Cell
from typing import Any, Iterable, Iterator

from openpyxl.workbook.child import _WorkbookChild

class Worksheet(_WorkbookChild):
    mime_type: str
    BREAK_NONE: int
    BREAK_ROW: int
    BREAK_COLUMN: int
    SHEETSTATE_VISIBLE: str
    SHEETSTATE_HIDDEN: str
    SHEETSTATE_VERYHIDDEN: str
    PAPERSIZE_LETTER: str
    PAPERSIZE_LETTER_SMALL: str
    PAPERSIZE_TABLOID: str
    PAPERSIZE_LEDGER: str
    PAPERSIZE_LEGAL: str
    PAPERSIZE_STATEMENT: str
    PAPERSIZE_EXECUTIVE: str
    PAPERSIZE_A3: str
    PAPERSIZE_A4: str
    PAPERSIZE_A4_SMALL: str
    PAPERSIZE_A5: str
    ORIENTATION_PORTRAIT: str
    ORIENTATION_LANDSCAPE: str
    def __init__(self, parent: Workbook, title: str | None = ...) -> None: ...
    @property
    def sheet_view(self) -> SheetView: ...
    @property
    def selected_cell(self) -> Cell: ...
    @property
    def active_cell(self) -> Cell: ...
    @property
    def page_breaks(self) -> PageBreak: ...
    @property
    def show_gridlines(self) -> Any: ...
    @property
    def show_summary_below(self) -> Any: ...
    @property
    def show_summary_right(self) -> Any: ...
    @property
    def freeze_panes(self) -> Any: ...
    @freeze_panes.setter
    def freeze_panes(self, topLeftCell: Any | None = ...) -> None: ...
    def cell(self, row: int, column: int, value: str | None = ...) -> Cell: ...
    def __getitem__(self, key: str) -> Cell | tuple[Cell]: ...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __iter__(self) -> Iterator[Cell]: ...
    def __delitem__(self, key: str) -> None: ...
    @property
    def min_row(self) -> int: ...
    @property
    def max_row(self) -> int: ...
    @property
    def min_column(self) -> int: ...
    @property
    def max_column(self) -> int: ...
    def calculate_dimension(self) -> str: ...
    @property
    def dimensions(self) -> str: ...
    def iter_rows(
        self,
        min_row: int | None = ...,
        max_row: int | None = ...,
        min_col: int | None = ...,
        max_col: int | None = ...,
        values_only: bool = ...,
    ) -> Generator[Iterable[Cell], None, None]: ...
    @property
    def rows(self) -> Generator[Iterable[Cell], None, None]: ...
    @property
    def values(self) -> Generator[str | None, None, None]: ...
    def iter_cols(
        self,
        min_col: int | None = ...,
        max_col: int | None = ...,
        min_row: int | None = ...,
        max_row: int | None = ...,
        values_only: bool = ...,
    ) -> Generator[Iterable[Cell], None, None]: ...
    @property
    def columns(self) -> Generator[Iterable[Cell], None, None]: ...
    def set_printer_settings(self, paper_size: Any, orientation: Any) -> None: ...
    def add_data_validation(self, data_validation: Any) -> None: ...
    def add_chart(self, chart: Any, anchor: Any | None = ...) -> None: ...
    def add_image(self, img: Any, anchor: Any | None = ...) -> None: ...
    def add_table(self, table: Table) -> None: ...
    @property
    def tables(self) -> TableList: ...
    def add_pivot(self, pivot: Any) -> None: ...
    def merge_cells(
        self,
        range_string: str | None = ...,
        start_row: int | None = ...,
        start_column: int | None = ...,
        end_row: int | None = ...,
        end_column: int | None = ...,
    ) -> None: ...
    @property
    def merged_cell_ranges(self) -> list[CellRange]: ...
    def unmerge_cells(
        self,
        range_string: str | None = ...,
        start_row: int | None = ...,
        start_column: int | None = ...,
        end_row: int | None = ...,
        end_column: int | None = ...,
    ) -> None: ...
    def append(self, iterable: Iterable[Any]) -> None: ...
    def insert_rows(self, idx: int, amount: int = ...) -> None: ...
    def insert_cols(self, idx: int, amount: int = ...) -> None: ...
    def delete_rows(self, idx: int, amount: int = ...) -> None: ...
    def delete_cols(self, idx: int, amount: int = ...) -> None: ...
    def move_range(self, cell_range: CellRange, rows: int = ..., cols: int = ..., translate: bool = ...) -> None: ...
    @property
    def print_title_rows(self) -> Any: ...
    @print_title_rows.setter
    def print_title_rows(self, rows: int) -> None: ...
    @property
    def print_title_cols(self) -> Any: ...
    @print_title_cols.setter
    def print_title_cols(self, cols: int) -> None: ...
    @property
    def print_titles(self) -> Any: ...
    @property
    def print_area(self) -> Any: ...
    @print_area.setter
    def print_area(self, value: str) -> None: ...
